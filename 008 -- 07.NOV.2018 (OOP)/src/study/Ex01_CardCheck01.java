package study;

public class Ex01_CardCheck01 {
	public static void main(String[] args) {
		Deck d = new Deck(); // 카드 한 벌 (Deck)을 만든다.
		Card c = d.pick(0); // 섞기 전에 제일 위의 카드를 뽑는다.
							// Card 클래스의 pick 메서드 --> 지정된 위치의 카드 한 장을 뽑아서 반환
		System.out.println(c); // System.out.println(c.toString()); 과 같다.
		
	//	d.shuffle(); // 카드를 섞는다.
		c = d.pick(); // 섞은 후에 제일 위의 카드를 뽑는다.
		System.out.println(c);
	}
}

// Deck 클래스 --> 카드 한 벌 (one deck) 의미
class Deck {
	final int CARD_NUM = 52; // 카드의 개수
	Card cardArr[] = new Card[CARD_NUM]; // Card객체 배열을 포함 --> 포함 관계!!!
	
	Deck () { // Deck의 카드를 초기화한다.
		int i = 0;
		
		for (int k = Card.KIND_MAX; k > 0; k--) { // KIND_MAX = 4
			for(int n = 0; n < Card.NUM_MAX; n++) { // NUM_MAX = 13
				cardArr[i++] = new Card(k, n+1);
			}
		}
	}
	
	// 여기서 "Card"는 pick 메서드의 리턴타입을 의미 --> 리턴타입이 클래스명이면 반환값은 참조형 타입용 주소값이라는 의미
	Card pick(int index) { // 지정된 위치(index)에 있는 카드 하나를 꺼내서 반환
		return cardArr[index];
	}
	
	Card pick() { // Deck에서 카드 하나를 선택한다.
		int index = (int)(Math.random() * CARD_NUM);
		return pick(index);
	}
	
	void shuffle() { // 카드의 순서를 섞는다.
		for(int i = 0; i < cardArr.length; i++) {
			int r = (int)(Math.random() * CARD_NUM);
			
			Card temp = cardArr[i];
			cardArr[i] = cardArr[r];
			cardArr[r] = temp;
		}
	}
} // Deck 클래스의 끝

// Card 클래스
class Card {
	static final int KIND_MAX = 4; // 카드 무늬의 수
	static final int NUM_MAX = 13; // 무늬별 카드 수
	
	static final int SPADE = 4;
	static final int DIAMOND = 4;
	static final int HEART = 4;
	static final int CLOVER = 4;
	
	int kind;
	int number;
	
	Card() {
		this(SPADE, 1);
	}
	
	Card(int kind, int number) {
		this.kind = kind;
		this.number = number;
	}
	
	public String toString() {
		String[] kinds = {"", "CLOVER", "HEART", "DIAMOND", "SPADE"};
		String numbers = "A123456789JQK";
		
		return "kind : " + kinds[this.kind] + ", number : " + numbers.charAt(this.number);
	} // toString()의 끝
} // Card 클래스의 끝