package study;

/* 생성자란?
 * 	>> 인스턴스 초기화 메서드
 * 
 * 생성자의 조건
 * 1. 생성자 이름은 클래스 이름과 동일하다.
 * 2. 생성자는 리턴 타입도 값도 없다.
 * 
 * 생성자의 규칙
 * 	>> 모든 클래스에는 반드시 하나 이상의 생성자가 있어야 한다!!
 */

// 2차원 좌표상의 한 점 p(x,y) 표현하는 클래스
class Point {
	int x;
	int y;
	
	/* 기본생성자 (default constructor)
	 * 	--> 기본형태 --> <class name>() { }
	 * 
	 * 사용자가 기본생성자를 정의하지 않았을 경우 컴파일러가 자동적으로 추가해준다.
	 * 사용자가 기본생성자를 정의한다면, 컴파일러는 추가해주지 않는다.
	 * 
	 * 다른 생성자를 정의하던 안 하던, 사용자가 항상 기본생성자 추가해주는 것이 좋다!
	 * 
	 * 생성자 속에서 다른 생성자 호출
	 * 	>> 같은 클래스 내의 다른 생성자 호출할 때 사용
	 * 	>> 생성자 호출 시, 생성자 이름 대신 this 사용한다
	 * 	>> 이렇게 생성자에서 다른 생성자 호출 시, 호출문이 첫 문장이어야 한다.
	 */
	
	// this --> 인스턴스 자기 자신을 가리키는 참조변수, 인스턴스의 주소값이 저장되어 있다
		 // -->모든 인스턴스 메서드 속에 지역변수로 숨겨진 채로 존재한다 (숨겨진 이유는 this를 사용자가 정의한 적이 없기 때문이다)
	
	// 기본생성자
	Point() {
		this(1,1); // 의미 --> Point(1,1);
				   // this.x != this(1,1) --> 아예 다른 사용 방법
				   // 여기서 this는 생성자
		/* x = 1; --> 이렇게 해도 되지만,
		 * y = 1;	     그러면 main()에서 Point(1,1) 호출하는 것과 똑같아 코드 중복 --> 대신 기본생성자 안에서 this(1,1)라고 표시
		 */
	}

	// x, y를 입력받는 생성자
	Point(int x, int y) {
		this.x = x;
		this.y = y;
			/* 여기서 this는 참조변수 (객체 자신을 참조)
			 * this.x --> 인스턴스 변수 x
			 * 		x --> 매개변수(지역변수) x
			 * this 사용하지 않으면 인스턴스 변수 x & 지역변수 x가 구분이 안된다
			 * 		x = x;
			 * 			--> 둘 다 지역변수 x로 인식, 즉 매개변수의 값을 다시 똑같은 매개변수에 대입하려고 시도
			 */
		
		/* this 사용하지 않고서도 제대로 실행하려면, 매개변수의 이름을 바꿔야 한다
		 * ex)
		 * Point(int xx, int yy) {
		 * 		x = xx;
		 * 		y = yy;
		 * }
		 */
	}
}

public class Ex03_Constructor {
	public static void main(String[] args) {
		// 점 p(3,5)
		Point p = new Point(); // --> <Point()> --> 이 부분이 생성자 호출하는 것
		p.x = 3; // Point에서 constructor 정의하지 않았다면,
		p.y = 5; // 	컴파일러가 붙이는 기본생성자가 값을 대입해주지 않기 때문에
				 //		객체 만드는 것으로 끝나면 안되고 초기화도 해줘야 한다.
				 // BUT 사용자가 constructor 정의한다면,
				 // 	컴파일러는 기본생성자를 붙이지 않기에 이 코드가 에러난다.
		
		// 생성자 Point(int x, int y) 사용 시
		Point q = new Point(3,5);
		
		System.out.println(p.x);
		System.out.println(q.x);
	}
}